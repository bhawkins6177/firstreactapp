{"ast":null,"code":"var _jsxFileName = \"/home/brandon/the_odin_project/firstreactapp/src/App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable max-len */\n\n/* eslint-disable jsx-a11y/label-has-associated-control */\n\n/* eslint-disable react/button-has-type */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n  const [pValue, setPValue] = useState([]); // this state will change based on what is clicked on the dropdown menu, this is the actual display state\n\n  const [fetchValue, setFetchValue] = useState('');\n  const [arrValue, setArrValue] = useState([]); // for all tasks, default view\n  // const [displayFetchValue, setDisplayFetchValue] =\n  // useState(\"\");\n\n  const [completeValue, setCompleteValue] = useState([]); // for my complete tasks\n\n  const [incomopleteValue, setIncompleteValue] = useState([]); // for my incomplete tasks\n\n  const [checkedState, setCheckedState] = useState([]);\n\n  function handleChange(position) {\n    const updatedCheckedState = checkedState.map((item, index) => index === position ? !item : item);\n    setCheckedState(updatedCheckedState);\n  } // setPValue(..arrValue)\n\n\n  useEffect(() => {\n    fetch('https://randomuser.me/api/?results=5').then(res => res.json()).then(parsed => {\n      console.log(parsed.results[0].name.first);\n      const firstName = parsed.results[0].name.first;\n      setFetchValue(firstName);\n    }).catch(err => console.log(err, 'err'));\n  }, []);\n\n  const inputFunctionHandler = event => {\n    setInputValue(event.target.value);\n  };\n\n  const onCLickFunction = event => {\n    event.preventDefault();\n    const newArray = [...pValue, inputValue];\n    setArrValue(newArray);\n    setPValue(newArray);\n    const testArray = [...checkedState];\n    testArray.push(false);\n    setCheckedState(testArray);\n    console.log(pValue);\n    console.log(checkedState); // call pvalue function\n    // set the perameters to theinPUTvalue\n  };\n\n  function deleteFunction(element) {\n    const newArray = pValue.filter(item => item !== element);\n    setPValue(newArray);\n  } // function showData(){\n  //   setDisplayFetchValue(fetchValue);\n  // }\n\n\n  function showIncomplete(e) {\n    e.preventDefault();\n    const tempCheckState = [...checkedState];\n    const incompletedTasks = [];\n    console.log('before', incompletedTasks, tempCheckState);\n\n    for (let i = 0; i < tempCheckState.length; i++) {\n      if (!tempCheckState[i]) {\n        incompletedTasks.push(arrValue[i]);\n      }\n    }\n\n    console.log(incompletedTasks, tempCheckState);\n    setPValue(incompletedTasks); // so try to remove the checkBox all together on click. That will fix the problem\n  }\n\n  function showComplete(e) {\n    e.preventDefault();\n    const tempCheckState = [...checkedState];\n    const completedTasks = [];\n\n    for (let i = 0; i < tempCheckState.length; i++) {\n      if (tempCheckState[i]) {\n        completedTasks.push(arrValue[i]);\n      }\n    }\n\n    setPValue(completedTasks);\n  }\n\n  function showAll(e) {\n    e.preventDefault();\n    setPValue(arrValue);\n  } // function checkBoxClick(e){\n  //   e.preventDefault();\n  //   console.log(e.target)\n  // }\n\n\n  function viewOnClick(e) {\n    e.preventDefault();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"React day 1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputValue,\n        onChange: inputFunctionHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onCLickFunction,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropbtn\",\n          onClick: viewOnClick,\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: showAll,\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: showComplete,\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: showIncomplete,\n            children: \"Incomplete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"list\",\n      children: pValue.map((element, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [' ', ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteFunction(element),\n          children: [' ', \"Delete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this), ' ', element, ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `checkBox${index}`,\n          checked: checkedState[index],\n          className: \"checkbox\",\n          onChange: () => handleChange(index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n} // export default App;\n// add the crossed out class, remove the check mark boxes for 'complete' and 'incomplete' functions\n// maybe when the all tab is clicked the checks marked ones will be crossed out, when the complete tap is clicked all are crossed out and there are no check mark buttons, whne the incomplete tab is clicked the checkmark boxes are removed\n\n_s(App, \"NuqNu5amiW2MxlEugbcjzpdKfvo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/brandon/the_odin_project/firstreactapp/src/App.js"],"names":["React","useState","useEffect","App","inputValue","setInputValue","pValue","setPValue","fetchValue","setFetchValue","arrValue","setArrValue","completeValue","setCompleteValue","incomopleteValue","setIncompleteValue","checkedState","setCheckedState","handleChange","position","updatedCheckedState","map","item","index","fetch","then","res","json","parsed","console","log","results","name","first","firstName","catch","err","inputFunctionHandler","event","target","value","onCLickFunction","preventDefault","newArray","testArray","push","deleteFunction","element","filter","showIncomplete","e","tempCheckState","incompletedTasks","i","length","showComplete","completedTasks","showAll","viewOnClick"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable react/button-has-type */\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nexport default function App() {\n  const [inputValue, setInputValue] = useState('');\n\n  const [pValue, setPValue] = useState([]); // this state will change based on what is clicked on the dropdown menu, this is the actual display state\n\n  const [fetchValue, setFetchValue] = useState('');\n\n  const [arrValue, setArrValue] = useState([]); // for all tasks, default view\n\n  // const [displayFetchValue, setDisplayFetchValue] =\n  // useState(\"\");\n\n  const [completeValue, setCompleteValue] = useState([]);// for my complete tasks\n\n  const [incomopleteValue, setIncompleteValue] = useState([]);// for my incomplete tasks\n\n  const [checkedState, setCheckedState] = useState(\n    [],\n  );\n\n  function handleChange(position) {\n    const updatedCheckedState = checkedState.map((item, index) => (index === position ? !item : item));\n\n    setCheckedState(updatedCheckedState);\n  }\n  // setPValue(..arrValue)\n\n  useEffect(() => {\n    fetch('https://randomuser.me/api/?results=5')\n      .then((res) => res.json())\n      .then((parsed) => {\n        console.log(parsed.results[0].name.first);\n        const firstName = parsed.results[0].name.first;\n\n        setFetchValue(firstName);\n      })\n      .catch((err) => console.log(err, 'err'));\n  }, []);\n\n  const inputFunctionHandler = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const onCLickFunction = (event) => {\n    event.preventDefault();\n    const newArray = [...pValue, inputValue];\n    setArrValue(newArray);\n    setPValue(newArray);\n    const testArray = [...checkedState];\n    testArray.push(false);\n    setCheckedState(testArray);\n    console.log(pValue);\n    console.log(checkedState);\n\n    // call pvalue function\n    // set the perameters to theinPUTvalue\n  };\n  function deleteFunction(element) {\n    const newArray = pValue.filter((item) => item !== element);\n\n    setPValue(newArray);\n  }\n  // function showData(){\n\n  //   setDisplayFetchValue(fetchValue);\n\n  // }\n  function showIncomplete(e) {\n    e.preventDefault();\n    const tempCheckState = [...checkedState];\n    const incompletedTasks = [];\n    console.log('before', incompletedTasks, tempCheckState);\n\n    for (let i = 0; i < tempCheckState.length; i++) {\n      if (!tempCheckState[i]) {\n        incompletedTasks.push(arrValue[i]);\n      }\n    }\n\n    console.log(incompletedTasks, tempCheckState);\n    setPValue(incompletedTasks);\n    // so try to remove the checkBox all together on click. That will fix the problem\n  }\n  function showComplete(e) {\n    e.preventDefault();\n    const tempCheckState = [...checkedState];\n    const completedTasks = [];\n\n    for (let i = 0; i < tempCheckState.length; i++) {\n      if (tempCheckState[i]) {\n        completedTasks.push(arrValue[i]);\n      }\n    }\n    setPValue(completedTasks);\n  }\n  function showAll(e) {\n    e.preventDefault();\n    setPValue(arrValue);\n  }\n  // function checkBoxClick(e){\n  //   e.preventDefault();\n  //   console.log(e.target)\n  // }\n  function viewOnClick(e) {\n    e.preventDefault();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>React day 1</h1>\n      <form>\n        <input value={inputValue} onChange={inputFunctionHandler} />\n        <button onClick={onCLickFunction}>Submit</button>\n        <div className=\"dropdown\">\n          <button className=\"dropbtn\" onClick={viewOnClick}>View</button>\n          <div className=\"dropdown-content\">\n            <button onClick={showAll}>All</button>\n            <button onClick={showComplete}>Complete</button>\n            <button onClick={showIncomplete}>Incomplete</button>\n          </div>\n        </div>\n      </form>\n      {/* <button onClick ={showData}> Display </button> */}\n      <p />\n      <p>{/* displayFetchValue */}</p>\n      <ul id=\"list\">\n        {\n    pValue.map((element, index) => (\n      <li>\n        {' '}\n        {' '}\n        {/* why did i put these here?? */}\n        <button onClick={() => deleteFunction(element)}>\n          {' '}\n          Delete\n        </button>\n        {' '}\n        {element}\n        {' '}\n        <input type=\"checkbox\" id={`checkBox${index}`} checked={checkedState[index]} className=\"checkbox\" onChange={() => handleChange(index)} />\n        <label htmlFor=\"checkbox\">Completed</label>\n      </li>\n    ))\n}\n      </ul>\n    </div>\n  );\n}\n// export default App;\n// add the crossed out class, remove the check mark boxes for 'complete' and 'incomplete' functions\n// maybe when the all tab is clicked the checks marked ones will be crossed out, when the complete tap is clicked all are crossed out and there are no check mark buttons, whne the incomplete tab is clicked the checkmark boxes are removed\n"]},"metadata":{},"sourceType":"module"}